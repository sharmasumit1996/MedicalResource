/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Appointment;
import Model.AppointmentHistory;
import Model.CityHistory;
import Model.CommunityHistory;
import Model.Doctor;
import Model.DoctorDirectory;
import Model.EncounterHistory;
import Model.Hospital;
import Model.HospitalDirectory;
import Model.HouseHistory;
import Model.Patient;
import Model.PatientDirectory;
import Model.PersonDirectory;
import Model.Vitals;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumit
 */
public class PatientAppointmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientAppointmentJPanel
     */
    public static PatientDirectory patientDirectory;
    public static CityHistory cityHistory;
    public static CommunityHistory communityHistory;
    public static EncounterHistory encounterHistory;
    public static DoctorDirectory doctorDirectory;
    public static HospitalDirectory hospitalDirectory;
    public static AppointmentHistory appointmentHistory;
    public static String Username;
    public static String Password;
    String apptNumber;
    public PatientAppointmentJPanel(PatientDirectory patientDirectory, EncounterHistory encounterHistory, DoctorDirectory doctorDirectory, CityHistory cityHistory, CommunityHistory communityHistory, HospitalDirectory hospitalDirectory, AppointmentHistory appointmentHistory, String username, String password) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.cityHistory = cityHistory;
        this.communityHistory = communityHistory; 
        this.encounterHistory = encounterHistory;
        this.doctorDirectory = doctorDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.appointmentHistory = appointmentHistory;
        this.Username = username;
        this.Password = password;
        Nametxt.setEditable(false);
        AppNotxt.setEnabled(false);
        Hospitaltxt.setEditable(false);
        CommNametxt.setEditable(false);
        CityNametxt.setEnabled(false);
        PatientNametxt.setEnabled(false);
        populateTable();
        //populateApptNo();
        AppNotxt.setText(String.valueOf(1));
        for (Appointment appt : appointmentHistory.getAppointmentHistory()){
            if(String.valueOf(appt.getApptNo()) == null){
            AppNotxt.setText(String.valueOf(appt.getApptNo() + 1));
        }
        }
        for (Patient pat : patientDirectory.getPatHistory()){
            if(pat.getUsername().equalsIgnoreCase(username)){
                PatientNametxt.setText(pat.getName());
            }
        }
    }
    
    /*private void populateApptNo()
    {
        for (Appointment appt : appointmentHistory.getAppointmentHistory()){
            int max = Collections.max(Arrays.asList(appt.getApptNo()));
            System.out.println("Max: "+max);
            if(String.valueOf(max) == null){
                apptNumber = String.valueOf(1);
                System.out.println("Null Max: "+max);
                AppNotxt.setText(apptNumber);
            }
            else{
                apptNumber = String.valueOf(max + 1);
                System.out.println("Array Max + 1: "+max);
                AppNotxt.setText(apptNumber);
            }
        }
            
    }*/
    
    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)AppointmentJTable.getModel();
        for(Doctor docs: doctorDirectory.getDocHistory()){
            for(Hospital hosp : hospitalDirectory.getHospitalDirectory()){
                if(hosp.getHospitalName().equals(docs.getHospital())){
                    model.setRowCount(0);
                    Object[] row = new Object[4];
                    row[0] = docs.getName();
                    row[1] = docs.getHospital();
                    row[2] = hosp.getCommunity();
                    row[3] = hosp.getCity();
                    model.addRow(row);
                }
            }
        }
        }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookAppointmentlbl = new javax.swing.JLabel();
        Namelbl = new javax.swing.JLabel();
        Nametxt = new javax.swing.JTextField();
        Hospitallbl = new javax.swing.JLabel();
        Hospitaltxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        AppointmentJTable = new javax.swing.JTable();
        Bookbtn = new javax.swing.JButton();
        CommNamelbl = new javax.swing.JLabel();
        CityNamelbl = new javax.swing.JLabel();
        CommNametxt = new javax.swing.JTextField();
        CityNametxt = new javax.swing.JTextField();
        AppDatejdc = new com.toedter.calendar.JDateChooser();
        ApptDatelbl = new javax.swing.JLabel();
        PatientNamelbl = new javax.swing.JLabel();
        PatientNametxt = new javax.swing.JTextField();
        ApptNolbl = new javax.swing.JLabel();
        AppNotxt = new javax.swing.JTextField();

        BookAppointmentlbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BookAppointmentlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BookAppointmentlbl.setText("Book Appointment");
        BookAppointmentlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Namelbl.setText("Doctor Name:");

        Nametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NametxtKeyPressed(evt);
            }
        });

        Hospitallbl.setText("Hospital:");

        Hospitaltxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HospitaltxtActionPerformed(evt);
            }
        });
        Hospitaltxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HospitaltxtKeyPressed(evt);
            }
        });

        AppointmentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor Name", "Hospital", "Community", "City"
            }
        ));
        AppointmentJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AppointmentJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AppointmentJTable);

        Bookbtn.setText("Book");
        Bookbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookbtnActionPerformed(evt);
            }
        });

        CommNamelbl.setText("Community Name:");

        CityNamelbl.setText("City Name:");

        CommNametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CommNametxtKeyPressed(evt);
            }
        });

        CityNametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CityNametxtKeyPressed(evt);
            }
        });

        ApptDatelbl.setText("Date:");

        PatientNamelbl.setText("Patient Name:");

        PatientNametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PatientNametxtKeyPressed(evt);
            }
        });

        ApptNolbl.setText("Appointment No.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Hospitallbl, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Hospitaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(503, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PatientNamelbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CommNamelbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(CityNamelbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ApptDatelbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AppDatejdc, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(CommNametxt)
                            .addComponent(CityNametxt)
                            .addComponent(PatientNametxt))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bookbtn)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(ApptNolbl, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(Namelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AppNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(BookAppointmentlbl))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BookAppointmentlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApptNolbl)
                    .addComponent(AppNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Namelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Nametxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Hospitallbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Hospitaltxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CommNamelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CommNametxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CityNamelbl)
                    .addComponent(CityNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ApptDatelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AppDatejdc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatientNamelbl)
                    .addComponent(PatientNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(Bookbtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void NametxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NametxtKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch))
        {
            Nametxt.setEditable(true);
        }
        else {
            Nametxt.setEditable(false); }
    }//GEN-LAST:event_NametxtKeyPressed

    private void HospitaltxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HospitaltxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HospitaltxtActionPerformed

    private void HospitaltxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HospitaltxtKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch))
        {
            Hospitaltxt.setEditable(true);
        }
        else {
            Hospitaltxt.setEditable(false); }
    }//GEN-LAST:event_HospitaltxtKeyPressed

    private void AppointmentJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AppointmentJTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = AppointmentJTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) AppointmentJTable.getModel();
        Nametxt.setText(model.getValueAt(selectedRowIndex, 0).toString());
        Hospitaltxt.setText(model.getValueAt(selectedRowIndex, 1).toString());
        CommNametxt.setText(model.getValueAt(selectedRowIndex, 2).toString());
        CityNametxt.setText(model.getValueAt(selectedRowIndex, 3).toString());  
    }//GEN-LAST:event_AppointmentJTableMouseClicked

    private void BookbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookbtnActionPerformed
        // TODO add your handling code here:
        if(validate(AppDatejdc.getDate())){
            Appointment AppointmentNew = appointmentHistory.addNewValue();
            AppointmentNew.setApptNo(Integer.parseInt(AppNotxt.getText()));
            AppointmentNew.setDoctorName(Nametxt.getText());
            AppointmentNew.setPatientName(PatientNametxt.getText());
            AppointmentNew.setApptDate(AppDatejdc.getDate());
            JOptionPane.showMessageDialog(this, "Appointment Confirmed!");
            AppNotxt.setText(AppNotxt.getText() + 1);
            AppNotxt.setText("");
            Nametxt.setText("");
            Hospitaltxt.setText("");
            CommNametxt.setText("");
            CityNametxt.setText("");
            AppDatejdc.setDate(null);
           // populateApptNo();
            populateTable();
        }       
    }//GEN-LAST:event_BookbtnActionPerformed

    private void CommNametxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CommNametxtKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch))
        {
            CommNametxt.setEditable(true);
        }
        else {
            CommNametxt.setEditable(false); }
    }//GEN-LAST:event_CommNametxtKeyPressed

    private void CityNametxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CityNametxtKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch))
        {
            CityNametxt.setEditable(true);
        }
        else {
            CityNametxt.setEditable(false); }
    }//GEN-LAST:event_CityNametxtKeyPressed

    private void PatientNametxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PatientNametxtKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch))
        {
            PatientNametxt.setEditable(true);
        }
        else {
            PatientNametxt.setEditable(false); }
    }//GEN-LAST:event_PatientNametxtKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser AppDatejdc;
    private javax.swing.JTextField AppNotxt;
    private javax.swing.JTable AppointmentJTable;
    private javax.swing.JLabel ApptDatelbl;
    private javax.swing.JLabel ApptNolbl;
    private javax.swing.JLabel BookAppointmentlbl;
    private javax.swing.JButton Bookbtn;
    private javax.swing.JLabel CityNamelbl;
    private javax.swing.JTextField CityNametxt;
    private javax.swing.JLabel CommNamelbl;
    private javax.swing.JTextField CommNametxt;
    private javax.swing.JLabel Hospitallbl;
    private javax.swing.JTextField Hospitaltxt;
    private javax.swing.JLabel Namelbl;
    private javax.swing.JTextField Nametxt;
    private javax.swing.JLabel PatientNamelbl;
    private javax.swing.JTextField PatientNametxt;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

private boolean validate(Date AppointmentDate) {
        //To change body of generated methods, choose Tools | Templates.
        if(AppointmentDate.before((java.util.Calendar.getInstance().getTime()))){
            JOptionPane.showMessageDialog(ApptDatelbl, "Start Date cannot be a past date", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
}
}
