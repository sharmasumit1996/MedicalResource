/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.City;
import Model.CityHistory;
import Model.Community;
import Model.CommunityHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumit
 */
public class SysAdCommunityJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SysAdCommunityJPanel
     */
    CommunityHistory communityhistory;
    CityHistory cityhistory;
    public SysAdCommunityJPanel(CommunityHistory communityhistory, CityHistory cityhistory) {
        initComponents();
        this.communityhistory = communityhistory;
        this.cityhistory = cityhistory;
        populateTable();
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)CommJTable.getModel();
        model.setRowCount(0);
        for(Community comm: communityhistory.getCommHistory()){
        
            Object[] row = new Object[10];
            row[0] = comm.getCommName();
            row[1] = comm.getCity();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Communitylbl = new javax.swing.JLabel();
        CommNamelbl = new javax.swing.JLabel();
        CityNamelbl = new javax.swing.JLabel();
        CommNametxt = new javax.swing.JTextField();
        CityNametxt = new javax.swing.JTextField();
        Savecommbtn = new javax.swing.JButton();
        UpdateCommbtn = new javax.swing.JButton();
        DeleteCommbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CommJTable = new javax.swing.JTable();

        Communitylbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Communitylbl.setText("Community");

        CommNamelbl.setText("Community Name:");

        CityNamelbl.setText("City Name:");

        Savecommbtn.setText("Save");
        Savecommbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavecommbtnActionPerformed(evt);
            }
        });

        UpdateCommbtn.setText("Update");

        DeleteCommbtn.setText("Delete");
        DeleteCommbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCommbtnActionPerformed(evt);
            }
        });

        CommJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Community Name", "City Name"
            }
        ));
        jScrollPane1.setViewportView(CommJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(338, 338, 338)
                            .addComponent(Communitylbl))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CommNamelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CommNametxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CityNamelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CityNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Savecommbtn)
                                .addGap(28, 28, 28)
                                .addComponent(UpdateCommbtn)
                                .addGap(29, 29, 29)
                                .addComponent(DeleteCommbtn)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Communitylbl)
                .addGap(18, 18, 18)
                .addComponent(CommNamelbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CommNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(CityNamelbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CityNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Savecommbtn)
                    .addComponent(UpdateCommbtn)
                    .addComponent(DeleteCommbtn))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteCommbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCommbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = CommJTable.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a record to delete","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) CommJTable.getModel();
        String CommName = model.getValueAt(selectedRowIndex, 0).toString();
        for(Community comm: communityhistory.getCommHistory()){
            if (CommName.equals(comm.getCommName())){
                communityhistory.deleteCommunity(comm);
                break;
            }
        }
        CommNametxt.setText("");
        CityNametxt.setText("");
        JOptionPane.showMessageDialog(this, "Community has been deleted!!");
        populateTable();
    }//GEN-LAST:event_DeleteCommbtnActionPerformed

    private void SavecommbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavecommbtnActionPerformed
        // TODO add your handling code here:
        if(validate(CommNametxt.getText(), CityNametxt.getText())){
            Community newCommunity = communityhistory.addNewValue();
            newCommunity.setCommName(CommNametxt.getText());
            newCommunity.setCity(CityNametxt.getText());
            
            JOptionPane.showMessageDialog(this, "New Community Added");
            for(City city: cityhistory.CityHistory){
            if(city.getCityName().equals(CityNametxt.getText())){
                city.CommunityList.add(newCommunity);
            }
        }
        }
        CommNametxt.setText("");
        CityNametxt.setText("");
        populateTable();
    }//GEN-LAST:event_SavecommbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CityNamelbl;
    private javax.swing.JTextField CityNametxt;
    private javax.swing.JTable CommJTable;
    private javax.swing.JLabel CommNamelbl;
    private javax.swing.JTextField CommNametxt;
    private javax.swing.JLabel Communitylbl;
    private javax.swing.JButton DeleteCommbtn;
    private javax.swing.JButton Savecommbtn;
    private javax.swing.JButton UpdateCommbtn;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

private boolean validate(String CommunityName, String CityName) {
        //To change body of generated methods, choose Tools | Templates.
        City city;
        boolean fetch = true,exists = false;
        for(int i =0;i<cityhistory.CityHistory.size();i++){
           
            city = cityhistory.CityHistory.get(i);
            if(CityName.equals(city.getCityName())){
                fetch = false;
                city.append(CommunityName);
                break;
            }
        }
        for(Community community: communityhistory.getCommHistory()){
            if(community.getCommName().equals(CommunityName) && community.getCity().equals(CityName)){
                exists = true;
            }
        }
        if(CommunityName.length()==0){
            JOptionPane.showMessageDialog(this, "Community Name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(CityName.length()==0){
            JOptionPane.showMessageDialog(this, "City Name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(fetch){
            JOptionPane.showMessageDialog(this, "City doesn't exists", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(exists){
            JOptionPane.showMessageDialog(this, "Community already exists in given city", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
}
