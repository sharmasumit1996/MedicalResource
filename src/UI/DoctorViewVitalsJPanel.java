/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Doctor;
import Model.DoctorDirectory;
import Model.Encounter;
import Model.EncounterHistory;
import Model.Patient;
import Model.PatientDirectory;
import Model.Vitals;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumit
 */
public class DoctorViewVitalsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorViewVitalsJPanel
     */
    PatientDirectory patientDirectory;
    EncounterHistory encounterHistory;
    DoctorDirectory doctorDirectory;
    Patient currPatient;
    String username;
    String password;
    String Doctorname;
    public DoctorViewVitalsJPanel(PatientDirectory patientDirectory, EncounterHistory encounterHistory, DoctorDirectory doctorDirectory,String Username,String Password, String DoctorName) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.encounterHistory = encounterHistory;
        this.doctorDirectory = doctorDirectory;
        this.username = Username;
        this.password = Password;
        this.Doctorname = DoctorName;
        populateTable();
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)VitalsJTable.getModel();
        model.setRowCount(0);
        for(Doctor docs: doctorDirectory.getDocHistory()){
        for(Encounter encounter: encounterHistory.getEncHistory()){
            if(docs.getDoctorID().equalsIgnoreCase(Doctorname)){
            Vitals vitals = encounter.getVitals();
            Object[] row = new Object[6];
            row[0] = vitals.getEncounterNumber();
            row[1] = vitals.getPatientName();
            row[2] = vitals.getBloodPressure();
            row[3] = vitals.getTemperature();            
            row[4] = vitals.getPulse();
            row[5] = vitals.getDoctorName();
            model.addRow(row);
        }
    }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Vitalslbl = new javax.swing.JLabel();
        PatientIDlbl1 = new javax.swing.JLabel();
        EncounterNumbertxt = new javax.swing.JTextField();
        PatientIDlbl = new javax.swing.JLabel();
        PatientIDtxt = new javax.swing.JTextField();
        Temperaturelbl = new javax.swing.JLabel();
        Temperaturetxt = new javax.swing.JTextField();
        BloodPressurelbl = new javax.swing.JLabel();
        BloodPressuretxt = new javax.swing.JTextField();
        Pulselbl = new javax.swing.JLabel();
        Pulsetxt = new javax.swing.JTextField();
        Doctorlbl = new javax.swing.JLabel();
        Doctortxt = new javax.swing.JTextField();
        Savebtn = new javax.swing.JButton();
        Updatebtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VitalsJTable = new javax.swing.JTable();

        Vitalslbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Vitalslbl.setText("Vitals");

        PatientIDlbl1.setText("Encounter No:");

        PatientIDlbl.setText("Patient Name:");

        Temperaturelbl.setText("Temperature:");

        BloodPressurelbl.setText("Blood Pressure:");

        Pulselbl.setText("Pulse:");

        Doctorlbl.setText("Doctor Name:");

        Savebtn.setText("Save");
        Savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavebtnActionPerformed(evt);
            }
        });

        Updatebtn.setText("Update");
        Updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatebtnActionPerformed(evt);
            }
        });

        Deletebtn.setText("Delete");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        VitalsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Encounter No.", "Patient Name", "Temperature", "Blood Pressure", "Pulse", "Doctor Name"
            }
        ));
        VitalsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VitalsJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(VitalsJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(312, 312, 312)
                                .addComponent(Vitalslbl))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Pulselbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Pulsetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Doctorlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Savebtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Updatebtn)
                                .addGap(18, 18, 18)
                                .addComponent(Deletebtn))
                            .addComponent(Doctortxt, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Temperaturelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BloodPressurelbl)
                            .addComponent(PatientIDlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PatientIDtxt)
                            .addComponent(BloodPressuretxt)
                            .addComponent(Temperaturetxt)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PatientIDlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(EncounterNumbertxt)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Vitalslbl)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatientIDlbl1)
                    .addComponent(EncounterNumbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatientIDlbl)
                    .addComponent(PatientIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Temperaturelbl)
                    .addComponent(Temperaturetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BloodPressurelbl)
                    .addComponent(BloodPressuretxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pulsetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pulselbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Doctorlbl)
                    .addComponent(Doctortxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Savebtn)
                    .addComponent(Updatebtn)
                    .addComponent(Deletebtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 115, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SavebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavebtnActionPerformed
        // TODO add your handling code here:
        if(validate(EncounterNumbertxt.getText(),PatientIDtxt.getText(), Temperaturetxt.getText(), BloodPressuretxt.getText(), Pulsetxt.getText(),Doctortxt.getText())){
            Vitals VitalsNew = new Vitals();
            VitalsNew.setEncounterNumber(Integer.parseInt(EncounterNumbertxt.getText()));
            VitalsNew.setPatientName(PatientIDtxt.getText());
            VitalsNew.setBloodPressure(Integer.parseInt(BloodPressuretxt.getText()));
            VitalsNew.setPulse(Integer.parseInt(Pulsetxt.getText()));
            VitalsNew.setTemperature(Integer.parseInt(Temperaturetxt.getText()));
            VitalsNew.setDoctorName(Doctortxt.getText());
            Encounter EncounterNew = encounterHistory.addNewValue();
            EncounterNew.setVitals(VitalsNew);
            EncounterNew.setDate(java.time.LocalDateTime.now());
            currPatient.EncounterHistory.add(EncounterNew);
            JOptionPane.showMessageDialog(this, "Vital Signs added for Patient");
            EncounterNumbertxt.setText("");
            PatientIDtxt.setText("");
            Temperaturetxt.setText("");
            BloodPressuretxt.setText("");
            Pulsetxt.setText("");
            Doctortxt.setText("");
            populateTable();
            EncounterNumbertxt.setEnabled(true);
        }
    }//GEN-LAST:event_SavebtnActionPerformed

    private void UpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatebtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = VitalsJTable.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        if(Updatevalidate(EncounterNumbertxt.getText(),PatientIDtxt.getText(), Temperaturetxt.getText(), BloodPressuretxt.getText(), Pulsetxt.getText(),Doctortxt.getText())){
            Vitals vita = new Vitals();
            int EncounterNumber = Integer.parseInt(EncounterNumbertxt.getText());
            String PatientName = PatientIDtxt.getText();
            int BP = Integer.parseInt(BloodPressuretxt.getText());
            int Pulse = Integer.parseInt(Pulsetxt.getText());
            int Temperature = Integer.parseInt(Temperaturetxt.getText());
            String DoctorName = Doctortxt.getText();
            for(Encounter enc: encounterHistory.getEncHistory()){
                if (EncounterNumber == enc.getVitals().getEncounterNumber()){
                    encounterHistory.deleteEncounter(enc);
                    break;
                }
            }
            Encounter enc1 = encounterHistory.addNewValue();
            vita.setEncounterNumber(EncounterNumber);
            vita.setPatientName(PatientName);
            vita.setBloodPressure(BP);
            vita.setTemperature(Temperature);
            vita.setPulse(Pulse);
            vita.setDoctorName(DoctorName);
            enc1.setVitals(vita);
            enc1.setDate(java.time.LocalDateTime.now());
            JOptionPane.showMessageDialog(this, "Vitals have been Updated");
            EncounterNumbertxt.setText("");
            PatientIDtxt.setText("");
            Temperaturetxt.setText("");
            BloodPressuretxt.setText("");
            Pulsetxt.setText("");
            Doctortxt.setText("");
            EncounterNumbertxt.setEnabled(true);
            populateTable();
        }
    }//GEN-LAST:event_UpdatebtnActionPerformed

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = VitalsJTable.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a record to delete","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) VitalsJTable.getModel();
        String EncounterNumber = model.getValueAt(selectedRowIndex, 0).toString();
        for(Encounter enc: encounterHistory.getEncHistory()){
            if (Integer.parseInt(EncounterNumber) == enc.getVitals().getEncounterNumber()){
                encounterHistory.deleteEncounter(enc);
                break;
            }
        }
        EncounterNumbertxt.setText("");
        PatientIDtxt.setText("");
        Temperaturetxt.setText("");
        BloodPressuretxt.setText("");
        Pulsetxt.setText("");
        Doctortxt.setText("");
        EncounterNumbertxt.setEnabled(true);
        populateTable();
        JOptionPane.showMessageDialog(this, "Vitals have been deleted!!");
    }//GEN-LAST:event_DeletebtnActionPerformed

    private void VitalsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VitalsJTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = VitalsJTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) VitalsJTable.getModel();
        EncounterNumbertxt.setText(model.getValueAt(selectedRowIndex, 0).toString());
        PatientIDtxt.setText(model.getValueAt(selectedRowIndex, 1).toString());
        Temperaturetxt.setText(model.getValueAt(selectedRowIndex, 2).toString());
        BloodPressuretxt.setText(model.getValueAt(selectedRowIndex, 3).toString());
        Pulsetxt.setText(model.getValueAt(selectedRowIndex, 4).toString());
        Doctortxt.setText(model.getValueAt(selectedRowIndex, 5).toString());
        EncounterNumbertxt.setEnabled(false);
    }//GEN-LAST:event_VitalsJTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BloodPressurelbl;
    private javax.swing.JTextField BloodPressuretxt;
    private javax.swing.JButton Deletebtn;
    private javax.swing.JLabel Doctorlbl;
    private javax.swing.JTextField Doctortxt;
    private javax.swing.JTextField EncounterNumbertxt;
    private javax.swing.JLabel PatientIDlbl;
    private javax.swing.JLabel PatientIDlbl1;
    private javax.swing.JTextField PatientIDtxt;
    private javax.swing.JLabel Pulselbl;
    private javax.swing.JTextField Pulsetxt;
    private javax.swing.JButton Savebtn;
    private javax.swing.JLabel Temperaturelbl;
    private javax.swing.JTextField Temperaturetxt;
    private javax.swing.JButton Updatebtn;
    private javax.swing.JTable VitalsJTable;
    private javax.swing.JLabel Vitalslbl;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private boolean validate(String EncounterNumber, String PatientID, String Temperature, String BP, String Pulse, String Doctor) {
        //To change body of generated methods, choose Tools | Templates.
        Patient pat;
        Doctor doc;
        boolean fetch = true, exists = true;
        for(int i=0; i<patientDirectory.patHistory.size();i++){
            pat = patientDirectory.patHistory.get(i);
            if(PatientID.equals(String.valueOf(pat.getName()))){
                fetch = false;
                currPatient = pat;
                break;
            }
        }
        for(int j=0; j<doctorDirectory.docHistory.size();j++){
            doc = doctorDirectory.docHistory.get(j);
            if(Doctor.equals(String.valueOf(doc.getName()))){
                exists = false;
                break;
            }
        }
        if(PatientID.length() == 0){
            JOptionPane.showMessageDialog(this, "ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(BP.length()==0){
            JOptionPane.showMessageDialog(this, "Blood Pressure cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Pulse.length()==0){
            JOptionPane.showMessageDialog(this, "Pulse cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Temperature.length()==0){
            JOptionPane.showMessageDialog(this, "Temperature cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Doctor.length()==0){
            JOptionPane.showMessageDialog(this, "Doctor cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(fetch){
            JOptionPane.showMessageDialog(this, "Patient doesn't exists, please add patient first", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(exists){
            JOptionPane.showMessageDialog(this, "Doctor doesn't exists, please add doctor first", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    private boolean Updatevalidate(String EncounterNumber, String PatientName, String Temperature, String BP, String Pulse, String Doctor) {
        //To change body of generated methods, choose Tools | Templates.
        Patient pat;
        Doctor doc;
        boolean fetch = true, exists = true, fetch1 = true;
        for(int i=0; i<patientDirectory.patHistory.size();i++){
            pat = patientDirectory.patHistory.get(i);
            if(PatientName.equals(String.valueOf(pat.getName()))){
                fetch = false;
                currPatient = pat;
                break;
            }
        }
        for(int j=0; j<doctorDirectory.docHistory.size();j++){
            doc = doctorDirectory.docHistory.get(j);
            if(Doctor.equals(String.valueOf(doc.getName()))){
                fetch1 = false;
                break;
            }
        }
        for(Encounter encounter: encounterHistory.getEncHistory()){
            Vitals vitals = encounter.getVitals();
            if(String.valueOf(vitals.getPatientName()).equals(PatientName) && String.valueOf(vitals.getTemperature()).equals(Temperature) && String.valueOf(vitals.getBloodPressure()).equals(BP) && String.valueOf(vitals.getPulse()).equals(Pulse)&& vitals.getDoctorName().equals(Doctor)){
                exists = false;
            }
        }
        if(PatientName.length() == 0){
            JOptionPane.showMessageDialog(this, "ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(BP.length()==0){
            JOptionPane.showMessageDialog(this, "Blood Pressure cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Pulse.length()==0){
            JOptionPane.showMessageDialog(this, "Pulse cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Temperature.length()==0){
            JOptionPane.showMessageDialog(this, "Temperature cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(Doctor.length()==0){
            JOptionPane.showMessageDialog(this, "Doctor cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(fetch){
            JOptionPane.showMessageDialog(this, "Patient doesn't exists, please add patient first", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(fetch1){
            JOptionPane.showMessageDialog(this, "Doctor doesn't exists, please add doctor first", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(exists){
            JOptionPane.showMessageDialog(this, "Vitals already exists for same patient", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
}
